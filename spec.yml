swagger: '2.0'

info:
  title: Settings Store
  version: 1.0.0

paths:
  /settings:
    get:
      tags: [ Rest ]
      summary: Get all settings
      operationId: getAllSettings
      security:
        - key: []
      responses:
        '200':
          description: Settings retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Setting'
        '500':
          $ref: '#/responses/InternalServerError'
      produces: [ application/json ]
    post:
      tags: [ Rest ]
      summary: Add new setting
      operationId: addSetting
      responses:
        '201':
          description: Settings added successfully
        '500':
          $ref: '#/responses/InternalServerError'
      parameters:
        - description: Setting to add
          required: true
          name: setting
          in: body
          schema:
            $ref: '#/definitions/Setting'
      security:
        - key: []
      consumes: [ application/json ]

  /settings/{id}/stream:
    get:
      tags: [ Stream ]
      summary: Get a stream of setting changes
      operationId: settingUpdates
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the setting to listen to
          type: integer
      security:
        - key: []
      responses:
        '200':
          description: todo
          schema:
            $ref: '#/definitions/Setting'
        '500':
          $ref: '#/responses/InternalServerError'
      produces: [ application/stream+json ]

  /settings/{id}:
    get:
      tags: [ Rest ]
      summary: Get a setting
      operationId: getSetting
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the setting to get
          type: integer
      security:
        - key: []
      responses:
        '200':
          description: Setting retrieved successfully
          schema:
            $ref: '#/definitions/Setting'
        '404':
          $ref: '#/responses/SettingNotFound'
        '500':
          $ref: '#/responses/InternalServerError'
      produces: [ application/json ]
    put:
      tags: [ Rest ]
      summary: Update existing setting
      operationId: updateSetting
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the setting to get
          type: integer
        - description: Setting to update
          required: true
          name: setting
          in: body
          schema:
            $ref: '#/definitions/Setting'
      security:
        - key: []
      responses:
        '204':
          description: Setting updated successfully
        '404':
          $ref: '#/responses/SettingNotFound'
        '500':
          $ref: '#/responses/InternalServerError'
      consumes: [ application/json ]
    delete:
      tags: [ Rest ]
      summary: Remove existing setting
      operationId: removeSetting
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the setting to remove
          type: integer
      security:
        - key: []
      responses:
        '204':
          description: Setting removed successfully
        '404':
          $ref: '#/responses/SettingNotFound'
        '500':
          $ref: '#/responses/InternalServerError'
      consumes: [ application/json ]

responses:
  SettingNotFound:
    description: The specified setting was not found
  InternalServerError:
    description: Something went wrong while processing your request

securityDefinitions:
  key:
    type: apiKey
    in: header
    name: x-token

definitions:
  Setting:
    type: object
    properties:
      id:
        type: integer
        minimum: 0
        maximum: 16
      type:
        type: string
        enum: [global, local, temporary, default]
      value:
        type: string
        minLength: 1
        maxLength: 32
      end:
        $ref: '#/definitions/DateTime'
    required:
      - id
      - type
      - value
      - end
  DateTime:
    type: string
    format: date-time
    x-go-type:
      type: Time
      import:
        package: time
      embedded: true

  principal:
    type: string
